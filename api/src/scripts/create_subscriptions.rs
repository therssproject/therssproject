use lazy_static::lazy_static;
use reqwest;
use serde_json::json;
use tracing::{error, info};

lazy_static! {
  static ref KEY: &'static str = "";
  static ref ENDPOINT: &'static str = "62cdd5ec089b3269f9996413";
  static ref KEYWORDS: Vec<&'static str> = vec![
    // Countries
    "Afghanistan",
    "Albania",
    "Algeria",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarctica",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Botswana",
    "Brazil",
    "Bulgaria",
    "Burundi",
    "Cambodia",
    "Cameroon",
    "Canada",
    "Chad",
    "Chile",
    "China",
    "Colombia",
    "Comoros",
    "Congo",
    "Croatia",
    "Cuba",
    "Cyprus",
    "Denmark",
    "Djibouti",
    "Dominica",
    "Ecuador",
    "Egypt",
    "Eritrea",
    "Estonia",
    "Ethiopia",
    "Fiji",
    "Finland",
    "France",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guyana",
    "Haiti",
    "Honduras",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Iraq",
    "Ireland",
    "Israel",
    "Italy",
    "Jamaica",
    "Japan",
    "Jersey",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Kosovo",
    "Kuwait",
    "Kyrgyzstan",
    "Latvia",
    "Lebanon",
    "Lesotho",
    "Liberia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn",
    "Poland",
    "Portugal",
    "Qatar",
    "Reunion",
    "Romania",
    "Rwanda",
    "Samoa",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Somalia",
    "Spain",
    "Sudan",
    "Suriname",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Taiwan",
    "Tajikistan",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Tunisia",
    "Turkey",
    "Turkmenistan",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Yemen",
    "Zambia",
    "Zimbabwe",


    // Languages:
    "HTML",
    "CSS",
    "Python",
    "Java",
    "JavaScript",
    "Swift",
    "Golang",
    "PHP",
    "TypeScript",
    "Scala",
    "Shell",
    "PowerShell",
    "Perl",
    "Haskell",
    "Kotlin",
    "SQL",
    "Delphi",
    "MATLAB",
    "Groovy",
    "Lua",
    "Rust",
    "Ruby",
  ];
}

pub async fn run() {
  let keywords = KEYWORDS
    .iter()
    .map(|s| s.to_string())
    .collect::<Vec<String>>();

  let client = reqwest::Client::new();
  for keyword in keywords {
    info!("Creating subscription for {}", keyword);

    let keyword = keyword.to_lowercase();
    let url = format!("https://www.reddit.com/r/{}/.rss", keyword);
    let payload = json!({
      "endpoint": ENDPOINT.clone(),
      "url": url,
    });

    let res = client
      .post("https://api.therssproject.com/v1/subscriptions")
      .json(&payload)
      .header("Authorization", KEY.clone())
      .send()
      .await;

    if let Err(_err) = res {
      error!("Error creating subscription: {}", keyword);
    }
  }
}
